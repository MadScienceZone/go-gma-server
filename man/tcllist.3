'\" <<bold-is-fixed>>
'\" <<ital-is-var>>
.TH TCLLIST 3 "GMA Toolkit 4.2.2" 13-Nov-2020 "API Functions" \" @@mp@@
.SH NAME
TclList \- Python interface to Tcl list objects
.SH SYNOPSIS
'\" <<usage>>
.LP
Python Usage:
.LP
.na
.B import 
.B SoftwareAlchemy.Common.TclList
.LP
.I tl
.B =
.BI TclList( tcl_string ='',
.IB make_numeric =False,
.IB from_list =None)
.br
.IB tl .make_numeric()
.br
.IB tl .from_list( iterable )
.br
.I string
.B =
.IB tl .to_tcl()
.ad
.LP
Go Usage:
.LP
.na
.B func
.BI ParseTclList( s
.B string)
.B ([]string,
.B error)
.br
.B func
.BI ToTclString( listval
.B []string)
.B (string,
.B error)
.ad
'\" <</usage>>
.SH DESCRIPTION
.LP
Some of the older elements of GMA (which used to be entirely written in the Tcl
language, after it was ported from the even older C++ code) use Tcl list objects
as their data representation. Notably the biggest example is the 
.BR mapper (6)
tool (which is still written in Tcl itself), whose map file format and TCP/IP
communications protocl include marshalled data structures represented as Tcl lists.
.LP
While this is obviously convenient for Tcl programs in that they can take such strings
and natively use them as lists of values, it is also useful generally in that it is a
simple string representation of a simple data structure. The actual definition of this
string format is included below.
.LP
The
.B TclList
Python object provides an easy Python interface to manipulate Tcl lists as Python lists.
(Courtesy of the fact that the Python's
.B tkinter
standard library module includes an embedded Tcl interpreter, this is done by calling into
the Tcl interpreter, so this should be very accurate in terms of being genuine Tcl lists
and not an approximate emulation.)
.LP
To create a
.B TclList
object from a string representation of a Tcl list (such as a value read from a map file),
simply call the constructor
'\" <<center>>
.RS
.I tl
.B =
.BI TclList( tcl_string )
.RE
.LP
Now you can access
.I tl
as if it were a Python 
.B list
object.
For example, after executing
'\" <<center>>
.RS
.B tl
.B =
.B "TclList('1 2 {Hello world} {3 4 {5 6}}')"
.RE
then the contents of
.B tl
will be
.BR "['1', '2', 'Hello world', '3 4 {5 6}']" .
.LP
A couple of things to note here. First, since no type information is provided in the Tcl
list representation (and in fact Tcl uses dynamic weak type bindings anyway), all values
are assumed to be strings. Second, there is no way to distinguish a string which contains
spaces from a sub-list, so \*(lq{Hello world}\*(rq may be a string of two words or a list
with two elements. You are expected to simply use each appropriately in each case. If we
wanted to consider element 3 of
.B tl
in this example as a list, we can construct a new
.B TclList
for it:
'\" <<center>>
.RS
.B tl2
.B =
.B TclList(tl[3])
.RE
which gives us
.BR "tl2=['3', '4', '5 6']" .
.LP
If the constructor's optional
.I make_numeric
parameter is 
.BR True ,
it will convert every element which appears to be a numeric value into a Python
.B int
or
.B float
object:
'\" <<center>>
.RS
.B tl
.B =
.B "TclList('1 2 {Hello world} {3 4 {5 6}}', make_numeric=True)"
.RE
in this case, the contents of
.B tl
will be
.BR "[1, 2, 'Hello world', '3 4 {5 6}']" .
.LP
You can also invoke the
.B tl.make_numeric()
method later to convert numeric elements at that time.
.LP
Alternatively, if you have a Python iterable object such as a list or tuple, you can
call the constructor as
'\" <<center>>
.RS
.I tl
.B =
.BI TclList(from_list= iterable )
.RE
in which case, the 
.B TclList
object will be created from the
.IR iterable .
If the
.I from_list
parameter is given, then
.I tcl_string
is ignored. The
'\" <<TeX>>
'\" \Var*{make\-\_\-nu\-mer\-ic}
.I make_numeric
'\" <</TeX>>
parameter is still respected and will force elements to numeric where possible if
it is
.BR True .
.LP
If you already have a
.B TclList
object
.IR tl ,
you may call the
.IB tl .from_list()
method with an
.I iterable
parameter. This will replace the existing elements of
.I tl
with those from the iterable. For example,
'\" <<TeX>>
'\"\begin{SourceCode}
'\"tl=TclList()
'\"tl.from_list([1, 2, [3, ['a', 'b'], 4, 5], 
'\"             'spam spam eggs spam'])
'\"\end{SourceCode}
'\"or
'\"\begin{SourceCode}
'\"tl=TclList(from_list=[1, 2, [3, ['a', 'b'], 4, 5], 
'\"                      'spam spam eggs spam'])
'\"\end{SourceCode}
.RS
.B tl
.B =
.B TclList()
.br
.IB tl ".from_list([1, 2, [3, ['a', 'b'], 4, 5], 'spam spam eggs spam'])"
.RE
or
.RS
.B tl
.B =
.B "TclList(from_list=[1, 2, [3, ['a', 'b'], 4, 5], 'spam spam eggs spam'])"
.RE
'\" <</TeX>>
both yield values in
.B tl
of
'\" <<center>>
.RS
.B "[1, 2, '3 {a b} 4 5', 'spam spam eggs spam']"
.RE
.LP
A
.B TclList
object may be converted to a valid Tcl string representation by calling the
.IB tl .to_tcl()
method. For example, given the
.I tl
object from the previous example, calling
.RS
.I tlist
.B =
.IB tl .to_tcl()
.RE
will assign the string
.RB \*(lq "1 2 {3 {a b} 4 5} {spam spam eggs spam}" \*(rq
to
.IR tlist .
.SS "Go API Variant"
.LP
In the Go version, two functions are provided to simply convert between a
discrete list of string values (as a slice of strings) and a TCL-formatted
string representation. No attempt is made to convert numeric values in order
to preserve the strong typing of the result value.
.LP
.BI ToTclString( listval )
takes a slice of strings as input, returning a single string result.
.BI ParseTclList( s )
parses an input string
.IR s ,
returning a list of strings representing that list's elements.
Both functions return an error in case they were unable to properly deal with
their input values.
.SH "TCL LIST FORMAT"
.LP
In a nutshell, a Tcl list (as a string representation) is a space-delimited list of
values. Any value which includes spaces is enclosed in curly braces.
An empty string (empty list) as an element in a list is represented as
.RB \*(lq {} \*(rq.
(E.g., 
.RB "\*(lq" "1 {} 2" "\*(rq" 
is a list of three elements, the middle of which is an
empty string.) An entirely empty Tcl list is represented as an empty string
\*(lq\*(rq.
.LP
A list value must have balanced braces. A balanced pair of braces that happen to be
inside a larger string value may be left as-is, since a string that happens to contain
spaces or braces is only distinguished from a deeply-nested list value when you attempt
to interpret it as one or another in the code. Thus, the list
'\" <<center>>
.RS
.RB "\*(lq" "a b {this {is a} string}" "\*(rq"
.RE
has three elements: 
.RB \*(lq a \*(rq,
.RB \*(lq b \*(rq,
and
.RB \*(lq "this {is a} string" \*(rq.
Otherwise, a lone brace that's part of a string value should be escaped with a backslash:
'\" <<center>>
.RS
.RB \*(lq "a b {this \e{ too}" \*(rq
.RE
.LP
Literal backslashes may be escaped with a backslash as well.
.LP
While extra spaces are ignored when parsing lists into elements, a properly formed string
representation of a list will have the miminum number of spaces and braces needed to describe
the list structure.
.SH DIAGNOSTICS
.LP
These functions may raise the following exceptions in addition to the normal set that may occur
otherwise:
'\" <<desc>>
.TP
.B TclListFormatError
The string does not represent a valid Tcl list.
'\" <</>>
.SH "SEE ALSO"
.SH AUTHOR
.LP
Steve Willoughby / steve@madscience.zone.
.SH HISTORY
.LP
The Go port appeared in November, 2020, in GMA version 4.2.2.
The original Python version calls directly into the Python interpreter's embedded Tcl
interpreter to perform the required translations. The Go version implements the conversion
operations directly, including a minimal amount of code ported from the open-source Tcl 
interpreter code.
.SH BUGS
.SH COPYRGHT
Part of the GMA software suite, copyright \(co 1992\-2020 by Steven L. Willoughby (MadScienceZone), Aloha, Oregon, USA. All Rights Reserved. Distributed under BSD-3-Clause License. \"@m(c)@
.LP
Parts of this code are based on a small part of the Tcl interpreter code, which is
copyrighted by the Regents of the University of California, Sun Microsystems, Inc.,
Scriptics Corporation, and other parties. Used in accordance with the licensing terms
of that original code.
