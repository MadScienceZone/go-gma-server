'\" LINK -> dieroller(3)
'\" <<bold-is-fixed>>
'\" <<ital-is-var>>
.TH DICE 3 "GMA Toolkit 4.2.2" 13-Nov-2020 "API Functions" \" @@mp@@
.SH NAME
Dice \- Dice Rolling Functions
.SH SYNOPSIS
'\" <<usage>>
.LP
Python Usage:
.LP
.na
.B import 
.B SoftwareAlchemy.GMA.Dice
.LP
.I d
.B =
.BI Dice( qty =1,
.IB sides =20,
.IB bonus =0,
.IB diebonus =0,
.IB div =None,
.IB description =None,
.IB factor =None,
.IB generator =None)
.br
.I result
.B =
.IB d .roll( confirm =False,
.IB threat =None,
.IB bonus =None)
.br
.I result
.B =
.IB d .value()
.br
.I result
.B =
.IB d .maxvalue()
.br
.I str
.B =
.IB d .description()
.br
.I str
.B =
.IB d .describe_roll()
.br
.I structured_results
.B =
.IB d .structured_describe_roll(sf= None )
.LP
.I dr
.B =
.BI DieRoller( generator =None)
.br
.IB label ,
.I result_set
.B =
.IB dr .do_roll( dice ='')
.br
.I str
.B =
.IB dr .to_text( structured_results ,
.IB label =None,
.IB formatting =None)
.LP
.BI main( argv =None,
.IB verbose =False)
.ad
.LP
Go Usage:
.LP
.B type
.B Dice
.B struct
.B {
.br
.B "\ \ \ MinValue"
.B int
.br
.B "\ \ \ MaxValue"
.B int
.br
.B "\ \ \ MultiDice"
.B []DieComponent
.br
.B "\ \ \ Rolled"
.B bool
.br
.B "\ \ \ LastValue"
.B int
.br
.B }
.LP
.B type
.B StructuredDescription
.B struct
.B {
.br
.B "\ \ \ Type"
.B string
.br
.B "\ \ \ Value"
.B string
.br
.B }
'\" <</usage>>
'\" <<usage>>
.LP
.B type
.B StructuredResult
.B struct
.B {
.br
.B "\ \ \ Result"
.B int
.br
.B "\ \ \ Details"
.B []StructuredDescription
.br
.B }
.LP
.B type
.B DieComponent
.B interface
.B {
.br
.BI "\ \ \ ApplyOp(" x ,
.I y
.B int)
.B (int,
.B error)
.br
.BI "\ \ \ Evaluate(" x
.B int)
.B (int,
.B error)
.br
.BI "\ \ \ MaxValue(" x
.B int)
.B (int,
.B error)
.br
.B "\ \ \ LastValue()"
.B int
.br
.B "\ \ \ Description()"
.B string
.br
.B "\ \ \ StructuredDescribeRoll()"
.B string
.br
.B "\ \ \ NaturalRoll()"
.B (int,
.B int)
.br
.B "\ \ \ GetOperator()"
.B string
.br
.B }
.LP
.B type
.B DieConstant
.B struct
.B {
// Implements DieComponent
.br
.B "\ \ \ Operator"
.B string
.br
.B "\ \ \ Value"
.B int
.br
.B "\ \ \ Label"
.B string
.br
.B }
.LP
.B type
.B DieSpec
.B struct
.B {
// Implements DieComponent
.br
.B "\ \ \ Operator"
.B string
.br
.B "\ \ \ Value"
.B string
.br
.B "\ \ \ Numerator"
.B int
.br
.B "\ \ \ Denominator"
.B int
.br
.B "\ \ \ Sides"
.B int
.br
.B "\ \ \ BestReroll"
.B bool
.br
.B "\ \ \ Rerolls"
.B int
.br
.B "\ \ \ DieBonus"
.B int
.br
.B "\ \ \ InitialMax"
.B bool
.br
.B "\ \ \ Label"
.B string
.br
.B "\ \ \ History"
.B [][]int
.br
.B "\ \ \ WasMaximized"
.B bool
.br
.B }
.LP
.B type
.B DieRoller
.B struct
.B {
.br
.B "\ \ \ LabelText"
.B string
.br
.B "\ \ \ Confirm"
.B bool
.br
.B "\ \ \ SuccessMessage"
.B string
.br
.B "\ \ \ FailMessage"
.B string
.br
.B "\ \ \ Template"
.B string
.br
.B "\ \ \ Permutations"
.B [][]interface{}
.br
.B "\ \ \ RepeatUntil"
.B int
.br
.B "\ \ \ RepeatFor"
.B int
.br
.B "\ \ \ DoMax"
.B bool
.br
.B "\ \ \ DC"
.B int
.br
.B "\ \ \ PctChance"
.B int
.br
.B "\ \ \ PctLabel"
.B string
.br
.B }
'\" <</usage>>
'\" <<usage>>
\"-------------------------------------------------------------------
.LP
Type
.B Dice
.br
.B "\ \ \ func"
.BI NewDice( description
.B string)
.B (*Dice,
.B error)
.br
.B "\ \ \ func"
.BI NewDiceBasic( qty ,
.IB sides ,
.I bonus
.B int)
.B (*Dice,
.B error)
.br
.B "\ \ \ func"
.BI NewDiceByParameters( qty ,
.IB sides ,
.IB bonus ,
.IB diebonus ,
.IB div ,
.I factor
.B int)
.B (*Dice,
.B error)
.br
.B "\ \ \ func"
.BI ( d
.B *Dice)
.B Description()
.B string
.br
.B "\ \ \ func"
.BI ( d
.B *Dice)
.B MaxRoll()
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( d
.B *Dice)
.BI MaxRollToConfirm( bonus
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( d
.B *Dice)
.B Roll()
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( d
.B *Dice)
.BI RollToConfirm( confirm
.B bool,
.IB threat ,
.I bonus
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( d
.B *Dice)
.BI StructuredDescribeRoll( sf ,
.IB successMessage ,
.I failureMessage
.B string,
.I rollBonus
.B int)
.B ([]StructuredDescription,
.B error)
.LP
Type
.B DieConstant
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.BI ApplyOp( x ,
.I y
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.B Description()
.B string
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.BI Evaluate( x
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.B GetOperator()
.B string
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.B LastValue()
.B int
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.BI MaxValue( x
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.B NaturalRoll()
.B (int,
.B int)
.br
.B "\ \ \ func"
.BI ( dc
.B *DieConstant)
.B StructuredDescribeRoll()
.B []StructuredDescription
.LP
Type
.B DieRoller
.br
.B "\ \ \ func"
.B NewDieRoller()
.B (*DieRoller,
.B error)
.br
.B "\ \ \ func"
.BI ( dr
.B *DieRoller)
.BI DoRoll( spec
.B string)
.B (string,
.B []StructuredResult,
.B error)
.LP
Type
.B DieSpec
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.BI ApplyOp( x ,
.I y
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B Description()
.B string
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.BI Evaluate( x
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B GetOperator()
.B string
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B IsMaxRoll()
.B bool
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B IsMinRoll()
.B bool
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B LastValue()
.B int
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.BI MaxValue( x
.B int)
.B (int,
.B error)
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B NaturalRoll()
.B (int,
.B int)
.br
.B "\ \ \ func"
.BI ( ds
.B *DieSpec)
.B StructuredDescribeRoll()
.B []StructuredDescription
'\" <</usage>>
.SH DESCRIPTION
.LP
This module provides a generic die-rolling interface.
.LP
There is a low-level
.B Dice
object which models a set of dice and handles most general random 
number generation TTRPG games require. A 
.B Dice
object may be constructed using discrete parameters which together
describe a set of dice to be rolled:
'\" <<desc>>
.TP 10
.I qty
The number of dice to roll. Their values will be added together.
.TP
.I sides
Number of sides each die has.
.TP
.I bonus
Additional value to add to the sum of all dice rolled.
.TP
.I diebonus
Additional value added to each die individually.
.TP
.I div
If specified, each die result is divided by
.I div
(fractions truncated).
.TP
.I factor
If specified, this value is multiplied to the final result.
'\" <</>>
.LP
Alternatively, a single string
.I description
may be passed which describes a more complex range of die roll arrangements.
This string may contain any number of nonnegative integer values and/or die-roll expressions separated by
the basic math operators 
.RB \*(lq + \*(rq,
.RB \*(lq \- \*(rq,
.RB \*(lq * \*(rq,
and
.RB \*(lq // \*(rq
which respectively add, subtract, multiply, and divide the total value so far with the value that follows
the operator.  Division performed with the
.RB \*(lq // \*(rq
operator is integer-only (results are immediately truncated by discarding any fractional part). There is no
order of operations or parentheses supported. The expressions are simply evaluated left-to-right as they appear. Generally speaking, whitespace is insignificant in the
.I description
string.
.LP
Each die-roll expression has the general form
'\" <<center>>
.RS
.RB [ > ]
.RI [ n [\fB/\fP div ]]
.B d
.I sides
.RB [ best | worst
.B of
.IR r ]
.RI [ label ]
.RE
.LP
This calls for 
.I n
dice with the given number of 
.I sides 
(which may be a number or the character 
.RB \*(lq % \*(rq
which means percentile dice or d100).
The optional
.I div
part of the expression allows a fractional number of dice: the expression
.RB \*(lq 1/2d20 \*(rq
rolls half of a d20 (in other words, it rolls 1d20 and divides the result by 2, truncating down).
The optional qualifier 
.RB \*(lq best
.B of
.IR r \*(rq
will cause the dice to be rolled 
.I r 
times, keeping the best result. (You may also use the word 
.B worst 
in place of 
.B best 
to take the lowest of the rolls.)
.LP
Arbitrary text 
.RI ( label )
may appear at the end of the expression. It is simply reported back in the result as a label to describe 
that value (e.g. 
.RB \*(lq "1d10 + 1d6 fire + 2d6 sneak" \*(rq.)
If the expression begins with the character
.RB \*(lq > \*(rq,
then the first die in the set is maximized: in the expression
.RB \*(lq >3d6 \*(rq,
the first d6 is assumed to have the maximum value (6), and the remaining two dice are rolled
to produce random values.
.LP
The entire die roll expression may be followed by one or both of the following
global modifiers, separated from the expression and each other by vertical bars
.RB (\*(lq | \*(rq):
.RB \*(lq min
.IR a \*(rq
or
.RB \*(lq max
.IR b \*(rq.
.RE
.LP
These force the final result to be no smaller than 
.I a
and/or no larger than
.IR b ,
where
.I a
and
.I b
are integer values. For example:
'\" <<center>>
.RS
.B "2d6 + 1d4 | min 6"
.RE
which rolls 2d6 and 1d4 to get a random value between 3 and 16, but if the result is
less than 6, it will return 6 anyway.
.LP
Regardless of the method used to specify the dice represented by the
.B Dice
object, it
will use a default random number generator 
such as 
.BR random.Random 
or the function passed to the
.B Dice
constructor in the
.I generator
parameter.
This function must have a
.B randint()
method with the same semantics as the
.B random.Random
generator.
.LP
Once the
.B Dice
object is thus constructed, the following methods may be called on it to roll and examine
the dice:
'\" <<list>>
.TP
.BI roll( confirm =False, " threat" =None, " bonus" =None)
Roll the dice which this
.B Dice
instance represents. The result is returned as an integer value.
Each time this is called, the dice are rerolled to get a new result.
The
.B Dice
object's internal state reflects the last call to this method.
.RS
.LP
If the
.I confirm
parameter is
.BR True ,
then this roll is for the purpose of confirming a critical roll
based on the previous roll, which must have involved only a single
die. If the previous roll was the maximum value of the die before
other modifiers are applied (or was at least the value of
.I threat
if that was supplied), then another roll is performed and the new
result returned. If
.I bonus
is supplied, it is added to the result as well. If there was no
previous roll, an exception is raised.
.LP
If the previous roll did not meet the qualifications above (e.g.,
it was not a natural 20 on a d20), then no roll is performed.
In this case,
.B None
is returned.
.RE
.TP
.B value()
Return the value of the last
.B roll()
of the dice. This is the same value originally returned by
.B roll()
or 
.B None
if there was no previous roll.
.TP
.B maxvalue()
Return the maximum possible roll that the dice could produce.
This counts as a roll of the dice, so subsequent calls to
.BR value() ,
.BR describe_roll() ,
and
.B structured_describe_roll()
will return or describe the maximized value.
.TP
.B description()
This returns a string that describes, in plain text, the dice
rolling expression the object was constructed to represent.
It is close to, but not identical to, the format of the
.I description
parameter to the constructor.
.TP
.B describe_roll()
This returns a string that describes, in plain text, the results
of the most recent
.BR roll() .
.TP
.BI structured_describe_roll(sf= None )
This returns a detailed accounting of the results of the most recent
.BR roll() .
If
.B sf
is provided, it is a sequence of two values. If the die-roll involved
a single die and that die came up as a natural 1, the reported description
includes 
.BI "('fail'," sf [1])
to indicate automatic failure. If the die was naturally the maximum value
possible for the die type,
.BI "('success'," sf [0])
to show automatic success.
The return value is a
.I structured_results
list. Each element of the list describes a discrete part of the
results as a tuple of 
.BI ( type ,
.IB string )
where
.I type
is a word that describes what the
.I string
value means. It can be used to select an appropriate formatting
for the
.IR string .
The possible values for
.I type
include
.RB \*(lq best \*(rq,
.RB \*(lq bonus \*(rq,
.RB \*(lq constant \*(rq,
.RB \*(lq diebonus \*(rq,
.RB \*(lq diespec \*(rq,
.RB \*(lq discarded \*(rq,
.RB \*(lq fail \*(rq,
.RB \*(lq label \*(rq,
'\".RB \*(lq limit \*(rq,
.RB \*(lq max \*(rq,
.RB \*(lq maximized \*(rq,
.RB \*(lq maxroll \*(rq,
.RB \*(lq min \*(rq,
.RB \*(lq moddelim \*(rq,
.RB \*(lq operator \*(rq,
.RB \*(lq result \*(rq,
.RB \*(lq roll \*(rq,
.RB \*(lq separator \*(rq,
.RB \*(lq success \*(rq,
and
.RB \*(lq worst \*(rq.
If no roll has yet been made, it returns
.B None
instead.
'\" <</>>
.SS "Higher-Level Interface"
.LP
A more comprehensive die-rolling interface is provided by the
.B DieRoller
class. Once instantiated, a new random number is generated by 
calling the following method:
'\" <<center>>
.RS
.BI do_roll( dice ='')
.RE
.LP
If specified, the
.I dice
parameter is a string that describes the die-rolling expression in the form:
'\" <<center>>
.RS
.RI [ title\fB=\fP ]
.I expression
.RI [\fB|\fP options ]
.RE
or
'\" <<center>>
.RS
.RI [ title\fB=\fP ]
.IB chance %
.RI [ success [\fB/\fP fail ]]
.RI [\fB|\fP options ]
.RE
.LP
where
.I expression
is anything that can be given as the
.I description
parameter to the 
.B Dice 
constructor as described above, and
.I options
is a vertical-bar-delimited set of global
options that control how the entire die roll is handled.
.LP
A
.I title
may be given to the roll to document what the roll is for. This is
simply reported back with the results and has no other effect.
.LP
The global 
.I options 
which may be added to the end are separated from each other and from the die
roll
.I expression
with vertical bar
.RB (\*(lq | \*(rq)
characters. They may be any of the following:
'\" <<desc>>
.TP 20
.BI "min " n
Result will be at least
.IR n .
.TP
.BI "max " n
Result will be no more than
.IR n .
.TP
.BI c\fR[\fP t \fR[\fP\(+- b \fR]]\fP
This indicates that the roll may need a critical
confirmation roll to follow it. After making the initial (internal)
.B Dice.roll()
call, another one
with 
.IB confirm =True
is made and, if successful, added to the result returned by this method.
By default, the critical threat range is assumed to be the maximum value
for the die rolled (e.g., a natural 20 on a d20). If the 
.I t
parameter is given, a natural roll equal to or greater than
.I t
is assumed to be a threat. If a plus or minus sign followed by a number
.I b
is given, that value is added to the confirmation die roll.
This option automatically implies a
.RB \*(lq "|sf hit/miss" \*(rq
option.
.TP 
.BI "DC " n
This is a roll against a known difficulty class (DC) of
.IR n .
Along with the roll result, it will report whether the DC was met, and if not
exactly, the amount by which the roll exceeded or fell short of the DC.
(The word \*(lqDC\*(rq may be in upper- or lower-case.)
.TP
.BI "sf \fR[\fP" success \fR[\fP/ fail \fR]]\fP
Auto-success/fail: the roll, which must involve only a single die, is automatically
considered to succeed if the die rolled to its maximum value (before modifiers are
applied), and a failure if it rolled a natural 1. In this case, rather than reporting
the result numerically, the string
.I success
is reported (or 
.RB \*(lq success \*(rq
by default) if automatic success was indicated, or
.RB \*(lq failed \*(rq
by default) in the event of automatic failure.
.TP
.BI "until " n
Roll repeatedly until the result is at least
.IR n .
This can be used for repeated skill checks where you need to know how many times
the check failed (and by how much) along the way to success.
.TP
.BI "repeat " n
Roll
.I n
times, reporting each result.
.TP
.B maximized
The maximum possible result
of the die roll is given rather than a random number. An exclamation mark
.RB (\*(lq ! \*(rq)
may be used in place of the word
.BR maximized .
This option is not guaranteed to work with the
.B c
or
.B sf
options.
'\" <</>>
.LP
To prevent getting caught in an infinite loop, a maximum of 100 rolls will be made
regardless of 
.B repeat 
and 
.B until 
options.
.LP
Anywhere in the string you may introduce a combination specifier in curly braces 
as 
.BI \fR\*(lq\fP{ a / b / c / \fR...\fP }\fR\*(rq.\fP
This will repeat the overall die roll expression once for each of the values 
.IR a , 
.IR b , 
.IR c , 
etc., substituting each in turn for the braced list. If multiple specifiers appear, they'll all 
repeat so you get the cartesian product of all the sets of values. This allows, for example, 
multiple attack rolls in a single click. For example, 
.RB \*(lq Attack=d20+{17/12/7} \*(rq
would roll three attack rolls: d20+17, d20+12, and d20+7.
.LP
In the second form,
.I chance
gives the percentage chance of something occurring, causing percentile dice
to be rolled. The result will be a boolean value that is
.B True
if the d100 roll was less than or equal to
.IR chance .
By default, the result is reported in the detailed description as
\*(lqsuccess\*(rq or \*(lqfail\*(rq. If a
.I success
label is given in the die-roll string, that is reported in case
of a successful roll, and
.RI "\*(lqdid not " success \*(rq
otherwise. If an explicit
.I fail
label is also given, that is used for unsuccessful rolls instead.
As a special case, if
.I success
is \*(lqmiss\*(rq then
.I fail
is assumed to be \*(lqhit\*(rq and vice versa.
.LP
For percentile rolls, only the
.BR until ,
.BR repeat ,
and
.B maximized
global options may be used. Permutations 
.RB (\*(lq { ... } \*(rq)
are also disallowed with percentile rolls.
.LP
If the
.I dice
string is empty, 
.B do_roll()
re-rolls the previously-specified die-roll expression. If no
.I dice
string was ever given, the 
.B DieRoller
defaults to rolling 1d20.
.LP
This method returns a tuple of values
.BI ( title ,
.IB result_set )
representing the results of rolling the dice.
The
.I title
is the title specified in the 
.I dice
string, or 
.B None
if one was not given.
The
.I result_set
is a list of results, one for each roll of the dice that was performed. Each element of
.I result_set
is a tuple
.RI ( result ,
.IR structured_results )
which give the integer result of that die roll, and a structured description of it 
as described for the
.B Dice.structured_describe_roll()
method, with the additional
.I type
values of
.RB \*(lq critlabel \*(rq,
.RB \*(lq critspec \*(rq,
.RB \*(lq dc \*(rq,
.RB \*(lq exceeded \*(rq,
.RB \*(lq fail \*(rq,
.RB \*(lq fullmax \*(rq,
.RB \*(lq iteration \*(rq,
.RB \*(lq met \*(rq,
.RB \*(lq repeat \*(rq,
.RB \*(lq short \*(rq,
.RB \*(lq sf \*(rq,
.RB \*(lq success \*(rq,
and
.RB \*(lq until \*(rq.
.RE
'\" <<list>>
.TP
.BI to_text( structured_results , " label" =None, " formatting" =None)
This renders the
.I structured_results
list returned by the
.B Dice.structured_describe_roll()
and 
.B DieRoller.do_roll()
methods into a string according to the formatting rules given by
.I formatting
(or simply producing a simple plain text version if no
.I formatting
value is given).
.RS
If
.I label
is given, it is the overall label (called title elsewhere in this document) for the die roll.
.LP
The
.I formatting
dictionary maps 
.I type
names as returned by the above-named methods to format strings such as would be accepted
by the
.B str.format()
method, with the
corresponding
.I value
provided as the only positional parameter. Thus, the value in
.IB formatting [ type ]
is a string which describes a
.I value
of that
.IR type ,
with a 
.RB \*(lq {} \*(rq
or
.RB \*(lq {0} \*(rq
at the place(s) in the string where the actual
.I value
string should go (see 
.B str.format()
for details).
.RE
'\" <</>>
.SS "Interactive Usage"
The module's
.B main()
function may be called to enter an interactive loop. The user is prompted for a die roll,
that is fed into
.BR DieRoller.do_roll() ,
and the process repeats until the user enters an EOF, or one of the strings
.RB \*(lq exit \*(rq,
.RB \*(lq quit \*(rq,
or
.RB \*(lq q \*(rq.
If command-line parameters are found in
.IR argv ,
it rolls each dice string in that list instead.
If 
.I verbose
is 
.BR True ,
then the raw data structures returned by the underlying API functions are printed as well.
.SH "GO API VARIANT"
.LP
While the GMA system is, generally, implemented in Python, and the majority of this document
describes the Python API for the die-rolling facility within GMA, there also exists a Go
language port of the die-rolling code, created to support a Go version of the server.
.LP
This section documents the Go interface so far as it differs from what is described elsewhere
in this document.
.LP
As with the Python version, there is a high-level interface via the
.B DieRoller
type, which accepts a die-roll specification string in the same format as the Python
API, which should be compatible with the way humans describe dice rolls when playing
games. A new 
.B DieRoller
value is constructed by calling
.B NewDieRoller()
and then its
.B DoRoll()
method each time a new roll is required. The
.B DoRoll()
method defaults initially to 
.RB \*(lq1d20\*(rq
until a non-empty
.I spec
string is passed to it. If
.I spec
is an empty string, it will roll again the last-known die-roll specification.
.LP
This method returns three values:
.IR title , 
.IR results , 
and
.IR error .
If 
.I error
is
.RB non- nil ,
something went wrong and none of the other values are defined. Otherwise, 
.I title
gives the user-supplied title for the die roll (if any), and
.I results
is a list of results of the dice rolled. There may be more than one result if the
.I spec
called for multiple rolls (e.g. if there are permutations in the specification or
if a critical roll confirmation was attempted). Each result is of type
.B StructuredResult
which contains an integer
.B Result
value giving the total result of the roll. In the case of percentile check rolls,
this will be 1 if the roll indicated success or 0 if it indicated failure.
The other value in that structure is
.BR Details ,
which is a slice of
.B StructuredDescription
values. Each of these gives one detail about what went into the result, as
documented below.
.LP
There is also, as with the Python API, a lower-level representation of a dice
roll in the form of the
.B Dice
value type.
A
.B Dice
value may be constructed using a
.I description
string (as with the Python version, this is a simplified subset of the
.BR DieRoller "'s"
.I spec
string), as in:
.RS
.LP
.B dice,
.B err
.B :=
.B NewDice(\[dq]2d6+5\[dq])
.RE
.LP
There are also parameterized constructors available. The simpler is
.RS
.LP
.B dice,
.B err
.B :=
.BI NewDiceBasic( qty ,
.IB sides ,
.IB bonus )
.RE
.LP
where
.I qty
is the number of dice to roll (and add together),
.I sides
is the number of sides on each die, and
.I bonus
is an amount to add to the results of the dice. Thus, the previous constructor
example is equivalent to calling
.B NewDiceBasic(2,
.B 6,
.BR 5) .
.LP
For greater control over the dice to be rolled, the fully parameterized constructor is
.RS
.LP
.B dice,
.B err
.B :=
.BI NewDiceByParameters( qty ,
.IB sides ,
.IB bonus ,
.IB diebonus ,
.IB div ,
.IB factor )
.RE
.LP
This allows the following additional parameters beyond those supported by
.BR NewDiceBasic :
'\" <<desc>>
.TP 10
.I diebonus
An additional amount to add to each individual die rolled.
.TP
.I div
If nonzero, a value by which to divide the result of each die roll.
.TP
.I factor
If nonzero, a value by which to multiple the final result.
'\" <</>>
.LP
Once constructed, calling
.IB dice .Roll()
rolls the dice and returns the integer result of the roll, or an error if something went wrong.
Alternatively, calling
.IB dice .MaxRoll()
returns the maximum possible result, just as though all dice happened to turn up with their maximum
face values.
.LP
Calling
.IB dice .Description()
returns a text string describing in human-readable terms what dice will be rolled, in a manner similar
to (but not guaranteed to be exactly matching) the 
.I description
parameter that may be passed to the
.B NewDice()
constructor.
.LP
If a critical roll is threatened, a confirmation roll is needed, which may have its own bonus added to (or subtracted from)
the total. This may be performed by calling
.IB dice .RollToConfirm(true,
.IB threat ,
.IB bonus)
after the initial (possibly critical) roll was made with a previous call to
.IB dice .Roll()\fR.\fP
(Calling
.IB dice .RollToConfirm()
with a
.B false
initial parameter is equivalent to calling
.IB dice .Roll()\fR.)\fP
This will check to see if the previous roll qualified as a critical threat based on the
.I threat
value. If not, 0 is returned as the result. Otherwise, a new roll will be made just as if
with the
.IB dice .Roll()
method, with the additional
.I bonus
value added to this roll.
.LP
There is a corresponding
.IB dice .MaxRollToConfirm( bonus )
call which works identically to
.IB dice .RollToConfirm()
but assumes all dice rolled their maximum values (as with the
.IB dice .MaxRoll()
method). This also implies that no
.I threat
parameter is needed since the previous roll was maximized and by definition would threaten
a critical roll.
.LP
Once a roll has been made by one of the above methods, calling
.IB dice .StructuredDescribeRoll()
returns a slice of
.B StructuredDescription
values, together describing all of the details behind how the total result
was obtained.
.SH "STRUCTURED RESULTS"
.LP
Some methods return a structured result list to describe the outcome of the die roll. This
is a human-readable text description of the rolls made, broken into pieces to facilitate easier
formatting. Each element of the structured results list is a 
.BI ( type ,
.IB value )
tuple. The
.I type
explains how to format the corresponding
.IR value ,
and may be one of the following:
'\" <<desc>>
.TP 11
.B best
The specifier to reroll and take the best of the dice rolled. The value is just the number of die 
rolls to perform.
.TP
.B bonus
Overall bonus applied to the entire roll but not included in the expression (e.g., the bonus added to
confirm critical rolls).
.TP
.B constant
A constant value being added (or whatever) to the overall total.
.TP
.B critlabel
Label automatically given to confirmation rolls.
.TP
.B critspec
Specifier for confirming critical rolls.
.TP
.B dc
The difficulty class for this roll.
.TP
.B diebonus
Bonus value added to each die in an individual diespec (not the overall total).
.TP
.B diespec
The specification of a single die roll component, such as
.RB \*(lq 12d6 \*(rq.
.TP
.B discarded
Results of a die roll that was made but discarded due to another rule, as a comma-separated
list of numbers that were rolled.
.TP
.B exceeded
The amount by which the roll exceeded the DC.
.TP
.B fail
The result of a rolled percentile check roll that indicated failure.
.TP
.B fullmax
The option
.RB \*(lq maximized \*(rq
which requests all dice to be maximized.
.TP
.B iteration
The roll number of the current iteration of rolls for repeating sets of rolls.
.TP
.B label
Arbitrary text label attached to a die expression (e.g., the
.RB \*(lq fire \*(rq
in
.RB \*(lq "1d6 fire" \*(rq).
'\".TP
'\".B limit
'\"A limit specified for the roll such as
'\".RB \*(lq "max 12" \*(rq
'\"or
'\".RB \*(lq "min 5" \*(rq.
.TP
.B max
The maximum value allowed for the die roll.
.TP
.B maximized
The prefix
.RB \*(lq > \*(rq
which requests a maximized first die in the roll.
.TP
.B maxroll
Same as
.BR roll ,
but all die rolls were forced to be maximized.
.TP
.B met
An indicator that the DC was met exactly.
.TP
.B min
The minimum value for the die roll.
.TP
.B moddelim
Delimiters which separate global modifiers from the other parts of the expression.
.TP
.B operator
One of the operators
.RB (\*(lq + \*(rq,
.RB \*(lq \- \*(rq,
etc.) which separates each die roll expression.
.TP
.B repeat
The number of times the roll is being repeated.
.TP
.B result
The full result of the die roll.
.TP
.B roll
The results of rolling a single diespec, as a comma-separated list of numbers
representing the side that rolled for each die in the diespec.
.TP
.B separator
Separators such as the 
.RB \*(lq = \*(rq
between the title and the rest of the expression.
.TP
.B short
The amount by which the roll fell short of the DC.
.TP
.B success
The result of a rolled percentile check roll that indicated success.
.TP
.B until
The value we are rolling repeatedly until we reach.
.TP
.B worst
The specifier to reroll and take the worst of the dice rolled. The value is the number of
times to try rolling.
'\" <</>>
.LP
For example, calling 
.B "DieRoller.do_roll('1d20+3 | min 5 | c')"
might result in an initial natural 20 (giving an overall result of 23). But since that was a 
natural 20, a second confirmation roll is made (due to the
.RB \*(lq c \*(rq
at the end of the expression), with a result of 13. In this case, the value returned from
.B do_roll()
is:
'\" <<TeX>>
'\" \begin{SourceCode}
'\" (None, [
'\"     (23, [
'\"         ('result', '23'),
'\"         ('success', 'HIT'),
'\"         ('separator', '='),
'\"         ('diespec', '1d20'),
'\"         ('roll', '20'),
'\"         ('operator', '+'),
'\"         ('constant', '3'),
'\"         ('moddelim', '|'),
'\"         ('min', '5'),
'\"         ('moddelim', '|'),
'\"         ('critspec', 'c')
'\"     ]),
'\"     (13, [
'\"         ('critlabel', 'Confirm:'),
'\"         ('result', '13'),
'\"         ('separator', '='),
'\"         ('diespec', '1d20'),
'\"         ('roll', '10'),
'\"         ('operator', '+'),
'\"         ('constant', '3'),
'\"         ('moddelim', '|'),
'\"         ('min', '5')
'\"     ])
'\" ])
'\" \end{SourceCode}
.RS
.ft CR
.nf
.na
.B "(None, ["
.RS
.B "(23, ["
.RS
.B "('result', '23'),"
.B "('success', 'HIT'),"
.B "('separator', '='),"
.B "('diespec', '1d20'),"
.B "('roll', '20'),"
.B "('operator', '+'),"
.B "('constant', '3'),"
.B "('moddelim', '|'),"
.B "('min', '5'),"
.B "('moddelim', '|'),"
.B "('critspec', 'c')"
.RE
.B "]),"
.B "(13, ["
.RS
.B "('critlabel', 'Confirm:'),"
.B "('result', '13'),"
.B "('separator', '='),"
.B "('diespec', '1d20'),"
.B "('roll', '10'),"
.B "('operator', '+'),"
.B "('constant', '3'),"
.B "('moddelim', '|'),"
.B "('min', '5')"
.RE
.B "])"
.RE
.B "])"
.ad
.fi
.ft
.RE
'\" <</TeX>>
.LP
Likewise, calling 
.B "DieRoller.do_roll('Attack=d20+{17/12}+3')" 
might return:
'\" <<TeX>>
'\" \begin{SourceCode}
'\" ('Attack', [
'\"     (38, [
'\"         ('result', '38'),
'\"         ('separator', '='),
'\"         ('diespec', '1d20'),
'\"         ('roll', '18'),
'\"         ('operator', '+'),
'\"         ('constant', '17'),
'\"         ('operator', '+'),
'\"         ('constant', '3')
'\"     ]),
'\"     (35, [
'\"         ('result', '35'),
'\"         ('separator', '='),
'\"         ('diespec', '1d20'),
'\"         ('roll', '20'),
'\"         ('operator', '+'),
'\"         ('constant', '12'),
'\"         ('operator', '+'),
'\"         ('constant', '3')
'\"     ])
'\" ]
'\" \end{SourceCode}
.RS
.ft CR
.nf
.na
.B "('Attack', ["
.RS
.B "(38, ["
.RS
.B "('result', '38'),"
.B "('separator', '='),"
.B "('diespec', '1d20'),"
.B "('roll', '18'),"
.B "('operator', '+'),"
.B "('constant', '17'),"
.B "('operator', '+'),"
.B "('constant', '3')"
.RE
.B "]),"
.B "(35, ["
.RS
.B "('result', '35'),"
.B "('separator', '='),"
.B "('diespec', '1d20'),"
.B "('roll', '20'),"
.B "('operator', '+'),"
.B "('constant', '12'),"
.B "('operator', '+'),"
.B "('constant', '3')"
.RE
.B "])"
.RE
.B "]"
.ft
.RE
'\" <</TeX>>.
.SH DIAGNOSTICS
.LP
These functions may raise the following exceptions in addition to the normal set that may occur
otherwise:
'\" <<desc>>
.TP
.B InvalidDiceDescription
The specification of the dice to roll was not understandable as written.
.TP
.B InvalidConfirmUsage
A confirmation was requested for a die roll specification that could not apply to.
'\" <</>>
.SH "SEE ALSO"
.SH AUTHOR
.LP
Steve Willoughby / steve@madscience.zone.
.SH HISTORY
The Go port appeared in November, 2020, in GMA version 4.2.2.
.SH BUGS
.SH COPYRGHT
Part of the GMA software suite, copyright \(co 1992\-2020 by Steven L. Willoughby (MadScienceZone), Aloha, Oregon, USA. All Rights Reserved. Distributed under BSD-3-Clause License. \"@m(c)@
